#!/usr/bin/env node

var
    packageDescriptor = require('../package.json'),
    dumpLicenses = require('../lib/index.js').dumpLicenses,
    checker = require('license-checker'),
    path = require('path'),
    fs = require('fs'),
    mkdirp = require('mkdirp'),
    nopt = require('nopt'),
    noptUsage = require('nopt-usage'),
    noptDefaults = require('nopt-defaults'),
    knownOpts = {
        json: path,
        csv: path,
        unknown: Boolean,
        dependencies: Boolean,
        start: Array,
        exclude: Array,
        help: Boolean,
        version: Boolean
    },
    shortHands = {
        "h" : ["--help"],
        "v" : ["--version"]
    },
    description = {
        json: "export data as JSON to the given file. The path will be created if it does not exist.",
        csv: "export data as comma-separated values to the given file. The path will be created if it does not exist.",
        unknown: "show only licenses that can't be determined or have been guessed.",
        dependencies: "show only third-party licenses, i.e., only list the dependencies defined in package.json.",
        start: "path to the directory the license search should start from. If omitted the current working directory is assumed.",
        exclude: "path to a directory to be excluded (and its subdirectories) from the search.",
        help: "this help message and exit.",
        version: "print version and exit."
    },
    defaults = {
        start: process.cwd()
    },
    usage = noptUsage(knownOpts, shortHands, description),
    parsedArgs = noptDefaults(nopt(knownOpts, shortHands, process.argv), defaults);


if (parsedArgs.help) {
    console.log('Usage: dumplicenses [options]');
    console.log('Options:');
    console.log(usage);
    console.log("Multiple use of the --start and --excluded options is allowed to provide a list of directory paths.");
}
else if (parsedArgs.version) {
    console.log(packageDescriptor.version);
}
else {
    var fileOutput = parsedArgs.json || parsedArgs.csv;

    dumpLicenses(parsedArgs, function(json) {
        var result = {};
        Object.keys(json).sort().forEach(function(item) {
            if (json[item]) {
                result[item] = json[item];
            }
        });

        var dir;
        if (fileOutput) {
            // out put to file
            if (parsedArgs.json) {
                dir = path.dirname(parsedArgs.json);
                mkdirp.sync(dir);
                fs.writeFileSync(parsedArgs.json, JSON.stringify(result, null, 4) + '\n', 'utf8');
                console.log('file written', parsedArgs.json);
            }
            if (parsedArgs.csv) {
                dir = path.dirname(parsedArgs.csv);
                mkdirp.sync(dir);
                fs.writeFileSync(parsedArgs.csv, checker.asCSV(result), 'utf8');
                console.log('file written', parsedArgs.csv);
            }
        }
        else {
            checker.print(result);
        }
        var nEntries = 0, key;
        for (key in result) {
            if (result.hasOwnProperty(key)) {
                ++nEntries;
            }
        }
        console.log("Number of entries found:", nEntries);
    })
}